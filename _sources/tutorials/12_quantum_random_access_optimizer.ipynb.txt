{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Quantum Random Access Optimization"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The Quantum Random Access Optimization (QRAO) module is designed to enable users to leverage a new quantum method for combinatorial optimization problems [1]. This approach incorporates Quantum Random Access Codes (QRACs) as a tool to encode multiple classical binary variables into a single qubit, thereby saving quantum resources and enabling exploration of larger problem instances on a quantum computer. The encodings produce a local quantum Hamiltonian whose ground state can be approximated with standard algorithms such as VQE, and then rounded to yield approximation solutions of the original problem.\n",
    "\n",
    "QRAO through a series of 3 classes:\n",
    "1. The encoding class (`QuantumRandomAccessEncoding`): This class encodes the original problem into a relaxed problem that requires fewer resources to solve.\n",
    "2. The rounding schemes (`SemideterministicRounding` and `MagicRounding`): This scheme is used to round the solution obtained from the relaxed problem back to a solution of the original problem.\n",
    "3. The optimizer class (`QuantumRandomAccessOptimizer`): This class performs the high-level optimization algorithm, utilizing the capabilities of the encoding class and the rounding scheme.\n",
    "\n",
    "\n",
    "*References*\n",
    "\n",
    "[1] Bryce Fuller et al., *Approximate Solutions of Combinatorial Problems via Quantum Relaxations,*  [arXiv:2111.03167](https://arxiv.org/abs/2111.03167)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit_optimization.algorithms.qrao import (\n",
    "    QuantumRandomAccessEncoding,\n",
    "    QuantumRandomAccessOptimizer,\n",
    "    SemideterministicRounding,\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Set up a combinatorial optimization problem\n",
    "\n",
    "In this tutorial, we will consider a random max-cut problem instance and use QRAO to try to find a maximum cut; in other words, a partition of the graph's vertices (nodes) into two sets that maximizes the number of edges between the sets.\n",
    "\n",
    "To begin, we utilize the `Maxcut` class from Qiskit Optimization's application module. It allows us to generate a `QuadraticProgram` representation of the given graph.\n",
    "\n",
    "Note that once our problem has been represented as a `QuadraticProgram`, it will need to be converted to the correct type, a [quadratic unconstrained binary optimization (QUBO)](https://en.wikipedia.org/wiki/Quadratic_unconstrained_binary_optimization) problem, so that it is compatible with QRAO.\n",
    "A `QuadraticProgram` generated by `Maxcut` is already a QUBO, but if you define your own problem be sure you convert it to a QUBO before proceeding. Here is [a tutorial](https://qiskit-community.github.io/qiskit-optimization/tutorials/02_converters_for_quadratic_programs.html) on converting `QuadraticPrograms`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Problem name: Max-cut\n",
      "\n",
      "Maximize\n",
      "  -2*x_0*x_1 - 2*x_0*x_3 - 2*x_0*x_4 - 2*x_1*x_2 - 2*x_1*x_5 - 2*x_2*x_3\n",
      "  - 2*x_2*x_4 - 2*x_3*x_5 - 2*x_4*x_5 + 3*x_0 + 3*x_1 + 3*x_2 + 3*x_3 + 3*x_4\n",
      "  + 3*x_5\n",
      "\n",
      "Subject to\n",
      "  No constraints\n",
      "\n",
      "  Binary variables (6)\n",
      "    x_0 x_1 x_2 x_3 x_4 x_5\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import networkx as nx\n",
    "from qiskit_optimization.applications import Maxcut\n",
    "\n",
    "seed = 1\n",
    "num_nodes = 6\n",
    "graph = nx.random_regular_graph(d=3, n=num_nodes, seed=seed)\n",
    "nx.draw(graph, with_labels=True, pos=nx.spring_layout(graph, seed=seed))\n",
    "\n",
    "maxcut = Maxcut(graph)\n",
    "problem = maxcut.to_quadratic_program()\n",
    "print(problem.prettyprint())"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Encode the problem into a quantum Hamiltonian\n",
    "\n",
    "Once we have appropriately configured our problem, we proceed to encode it using the `QuantumRandomAccessEncoding` class from the `qrao` module. This encoding step allows us to generate a quantum Hamiltonian operator that represents our problem. In particular, we employ a Quantum Random Access Code (QRAC) to encode multiple classical binary variables (corresponding to the nodes of our max-cut graph) into each qubit.\n",
    "\n",
    "It's important to note that the resulting \"relaxed\" Hamiltonian, produced by this encoding, will not be diagonal. This differs from the standard workflow in `qiskit-optimization`, which typically generates a diagonal (Ising) Hamiltonian suitable for optimization using a `MinimumEigenOptimizer`. You can find a tutorial on the `MinimumEigenOptimizer` [here](https://qiskit-community.github.io/qiskit-optimization/tutorials/03_minimum_eigen_optimizer.html).\n",
    "\n",
    "In our encoding process, we employ a $(3,1,p)-$QRAC, where each qubit can accommodate a maximum of 3 classical binary variables. The parameter $p$ represents the bit recovery probability achieved through measurement. Depending on the nature of the problem, some qubits may have fewer than 3 classical variables assigned to them. To evaluate the compression achieved, we can examine the `compression_ratio` attribute of the encoding, which provides the ratio between the number of original binary variables and the number of qubits used (at best, a factor of 3)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Our encoded Hamiltonian is:\n",
      "( SparsePauliOp(['XX', 'XY', 'XZ', 'YX', 'ZX', 'YY', 'YZ', 'ZY', 'ZZ'],\n",
      "              coeffs=[1.5+0.j, 1.5+0.j, 1.5+0.j, 1.5+0.j, 1.5+0.j, 1.5+0.j, 1.5+0.j, 1.5+0.j,\n",
      " 1.5+0.j]) ).\n",
      "\n",
      "We achieve a compression ratio of (6 binary variables : 2 qubits) ≈ 3.0.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from qiskit_optimization.algorithms.qrao import QuantumRandomAccessEncoding\n",
    "\n",
    "# Create an encoding object with a maximum of 3 variables per qubit, aka a (3,1,p)-QRAC\n",
    "encoding = QuantumRandomAccessEncoding(max_vars_per_qubit=3)\n",
    "\n",
    "# Encode the QUBO problem into an encoded Hamiltonian\n",
    "encoding.encode(problem)\n",
    "\n",
    "# This is our encoded Hamiltonian\n",
    "print(f\"Our encoded Hamiltonian is:\\n( {encoding.qubit_op} ).\\n\")\n",
    "print(\n",
    "    \"We achieve a compression ratio of \"\n",
    "    f\"({encoding.num_vars} binary variables : {encoding.num_qubits} qubits) \"\n",
    "    f\"≈ {encoding.compression_ratio}.\\n\"\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solve the problem using the `QuantumRandomAccessOptimizer`\n",
    "\n",
    "Having successfully encoded our input problem as a relaxed Hamiltonian, we proceed to solve it using the `QuantumRandomAccessOptimizer`. This optimizer allows us to find an approximate solution to the relaxed problem by leveraging quantum computing techniques.\n",
    "\n",
    "To set up the optimizer, we need to specify two crucial components:\n",
    "\n",
    "1. **Minimum Eigensolver**: We specify a minimum eigensolver to heuristically search for the ground state of the relaxed problem Hamiltonian. As an example, we can use the Variational Quantum Eigensolver (VQE). For simulation purposes, we'll employ an simulator, but you can choose a quantum device as the backend if desired.\n",
    "2. **Rounding Scheme**: To map the ground state results back to a solution for the original problem, we specify a rounding scheme. By default, the `SemideterministicRounding` is used, but alternative scheme, `MagicRounding`, is also available."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit.circuit.library import real_amplitudes\n",
    "from qiskit.primitives import StatevectorEstimator\n",
    "from qiskit_optimization.algorithms.qrao import (\n",
    "    QuantumRandomAccessOptimizer,\n",
    "    SemideterministicRounding,\n",
    ")\n",
    "from qiskit_optimization.minimum_eigensolvers import VQE\n",
    "from qiskit_optimization.optimizers import COBYLA\n",
    "\n",
    "# Prepare the VQE algorithm\n",
    "ansatz = real_amplitudes(2)\n",
    "vqe = VQE(\n",
    "    ansatz=ansatz,\n",
    "    optimizer=COBYLA(),\n",
    "    estimator=StatevectorEstimator(),\n",
    ")\n",
    "\n",
    "# Use semi-deterministic rounding, known as \"Pauli rounding\"\n",
    "# in https://arxiv.org/pdf/2111.03167v2.pdf\n",
    "# (This is the default if no rounding scheme is specified.)\n",
    "semidterministic_rounding = SemideterministicRounding()\n",
    "\n",
    "# Construct the optimizer\n",
    "qrao = QuantumRandomAccessOptimizer(min_eigen_solver=vqe, rounding_scheme=semidterministic_rounding)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we move forward with solving the problem by invoking the `solve()` method. It's important to note that when calling `solve()`, we pass the `problem` itself as an argument. Although we previously used `encode()` in `QuantumRandomAccessEncoding` to provide a clear understanding of the flow, `solve(problem)` automatically encodes the problem internally using `QuantumRandomAccessEncoding`. This provides a streamlined and simplified workflow that eliminates the need for explicit encoding steps.\n",
    "\n",
    "The result is provides us as a `QuantumRandomAccessOptimizationResult`.\n",
    "The `x` contains the binary values representing the best solution found, while the `fval` contains the corresponding objective value.\n",
    "\n",
    "The `relaxed_fval` provides the expectation value of the relaxed Hamiltonian, adjusted to be in the units of the original optimization problem. For maximization problems, the best possible relaxed function value will always be greater than or equal to the best possible objective function value of the original problem. In practice, this often holds true for the best found value and best found objective function value as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The objective function value: 9.0\n",
      "x: [1 0 1 0 0 1]\n",
      "relaxed function value: 8.999999993833729\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Solve the optimization problem\n",
    "results = qrao.solve(problem)\n",
    "\n",
    "print(\n",
    "    f\"The objective function value: {results.fval}\\n\"\n",
    "    f\"x: {results.x}\\n\"\n",
    "    f\"relaxed function value: {-1 * results.relaxed_fval}\\n\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Interpret the solution"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the context of [max-cut](https://en.wikipedia.org/wiki/Maximum_cut), the result's \"optimal value\" tells us which subset each node belongs to given the partition found by the optimizer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The obtained solution places a partition between nodes [1, 3, 4] and nodes [0, 2, 5].\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "maxcut_partition = maxcut.interpret(results)\n",
    "print(\n",
    "    f\"The obtained solution places a partition between nodes {maxcut_partition[0]} \"\n",
    "    f\"and nodes {maxcut_partition[1]}.\"\n",
    ")\n",
    "maxcut.draw(results, pos=nx.spring_layout(graph, seed=seed))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Inspect the results of subroutines"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `MinimumEigensolverResult` that results from performing VQE on the relaxed Hamiltonian is available:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<qiskit_optimization.minimum_eigensolvers.vqe.VQEResult at 0x127ad3dd0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.relaxed_result"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The result of the rounding scheme is also worth considering. In this example, we used the `SemideterministricRounding`. It's important to note that with semi-deterministic rounding, a single sample is generated as the result, making it the optimal solution candidate.\n",
    "\n",
    "However, if we use the `MagicRounding` instead, multiple samples would be generated, each with a probability associated with it. These probabilities sum up to one, providing a distribution of potential optimal solutions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[SolutionSample(x=array([1, 0, 1, 0, 0, 1]), fval=np.float64(9.0), probability=1.0, status=<OptimizationResultStatus.SUCCESS: 0>)]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "results.samples"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exact Problem Solution with the `NumpyMinimumEigensolver`\n",
    "\n",
    "To assess the performance of QRAO in approximating the optimal solution, we can utilize the `NumpyMinimumEigensolver`, an exact classical optimizer. We can obtain the exact optimal solution to the problem as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "objective function value: 9.0\n",
      "variable values: x_0=0.0, x_1=1.0, x_2=0.0, x_3=1.0, x_4=1.0, x_5=0.0\n",
      "status: SUCCESS\n"
     ]
    }
   ],
   "source": [
    "from qiskit_optimization.algorithms import MinimumEigenOptimizer\n",
    "from qiskit_optimization.minimum_eigensolvers import NumPyMinimumEigensolver\n",
    "\n",
    "exact_mes = NumPyMinimumEigensolver()\n",
    "exact = MinimumEigenOptimizer(exact_mes)\n",
    "exact_result = exact.solve(problem)\n",
    "print(exact_result.prettyprint())"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The approximation ratio (QRAO's objective function value divided by the optimal objective function value) tells us how closely QRAO approximated the optimal solution to the problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "QRAO Approximate Optimal Function Value: 9.0\n",
      "Exact Optimal Function Value: 9.0\n",
      "Approximation Ratio: 1.00\n"
     ]
    }
   ],
   "source": [
    "print(\"QRAO Approximate Optimal Function Value:\", results.fval)\n",
    "print(\"Exact Optimal Function Value:\", exact_result.fval)\n",
    "print(f\"Approximation Ratio: {results.fval /  exact_result.fval :.2f}\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solve the problem using the `QuantumRandomAccessOptimizer` with `MagicRounding`\n",
    "\n",
    "Magic rounding is a quantum technique employed to map the ground state results of our encoded Hamiltonian back to a solution of the original problem. Unlike semi-deterministic rounding, magic rounding requires a quantum backend, which can be either hardware or a simulator. \n",
    "The backend is passed to the `MagicRounding` class through a `Sampler`, which also determines the total number of shots (samples) that magic rounding will utilize. Note that to specify the backend, you need to choose a `Sampler` from providers such as Aer or IBM Runtime. Consequently, we need to specify `Estimator` and `Sampler` for the optimizer and the rounding scheme, respectively.\n",
    "\n",
    "In practice, users may choose to set a significantly higher number of magic rounding shots compared to the shots used by the minimum eigensolver for the relaxed problem. This difference arises because the minimum eigensolver estimates expectation values, while the magic rounding scheme returns the sample corresponding to the maximum function value found.  The number of magic rounding shots directly impacts the diversity of the computational basis we can generate.\n",
    "When estimating an expectation value, increasing the number of shots enhances the convergence to the true value. However, when aiming to identify the largest possible function value, we often sample from the tail of a distribution of outcomes. As a result, until we observe the highest value outcome in our distribution, each additional shot increases the expected return value.\n",
    "\n",
    "In this tutorial, we use the `Estimator` for solving the relaxed Hamiltonian and the `Sampler` for performing magic rounding. Here, 10 times as many shots are used in the `Sampler`. As the number of qubits increases, you may need more shots or `weighted` basis sampling, as explained above.\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit.primitives import StatevectorSampler\n",
    "from qiskit_optimization.algorithms.qrao import MagicRounding\n",
    "\n",
    "estimator = StatevectorEstimator()\n",
    "sampler = StatevectorSampler(seed=seed, default_shots=10000)\n",
    "\n",
    "# Prepare the VQE algorithm\n",
    "ansatz = real_amplitudes(2)\n",
    "vqe = VQE(\n",
    "    ansatz=ansatz,\n",
    "    optimizer=COBYLA(),\n",
    "    estimator=estimator,\n",
    ")\n",
    "\n",
    "\n",
    "# Use magic rounding\n",
    "magic_rounding = MagicRounding(sampler=sampler)\n",
    "\n",
    "# Construct the optimizer\n",
    "qrao = QuantumRandomAccessOptimizer(min_eigen_solver=vqe, rounding_scheme=magic_rounding)\n",
    "\n",
    "results = qrao.solve(problem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The objective function value: 9.0\n",
      "x: [0 1 0 1 1 0]\n",
      "relaxed function value: 8.999999997032134\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(\n",
    "    f\"The objective function value: {results.fval}\\n\"\n",
    "    f\"x: {results.x}\\n\"\n",
    "    f\"relaxed function value: {-1 * results.relaxed_fval}\\n\"\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since magic rounding relies on nondeterministic measurements, the method collects a number of samples based on the shots count provided to the `Sampler` mentioned earlier. These samples are then consolidated, taking into account duplicates and calculating the empirical probability for each `SolutionSample`. Each sample in the consolidation process includes a corresponding function value (`fval`).\n",
    "\n",
    "From the consolidated samples, we select the sample with the \"optimal\" function value. In the case of a max-cut problem, this means choosing the sample with the largest function value as our solution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of distinct samples is 56.\n",
      "Top 10 samples with the largest fval:\n",
      "SolutionSample(x=array([0, 1, 0, 1, 1, 0]), fval=np.float64(9.0), probability=np.float64(0.0107), status=<OptimizationResultStatus.SUCCESS: 0>)\n",
      "SolutionSample(x=array([1, 0, 1, 0, 0, 1]), fval=np.float64(9.0), probability=np.float64(0.0115), status=<OptimizationResultStatus.SUCCESS: 0>)\n",
      "SolutionSample(x=array([1, 1, 1, 0, 0, 1]), fval=np.float64(6.0), probability=np.float64(0.021799999999999996), status=<OptimizationResultStatus.SUCCESS: 0>)\n",
      "SolutionSample(x=array([0, 0, 0, 1, 1, 0]), fval=np.float64(6.0), probability=np.float64(0.0226), status=<OptimizationResultStatus.SUCCESS: 0>)\n",
      "SolutionSample(x=array([1, 0, 0, 0, 0, 1]), fval=np.float64(6.0), probability=np.float64(0.0197), status=<OptimizationResultStatus.SUCCESS: 0>)\n",
      "SolutionSample(x=array([0, 1, 1, 1, 1, 0]), fval=np.float64(6.0), probability=np.float64(0.020600000000000004), status=<OptimizationResultStatus.SUCCESS: 0>)\n",
      "SolutionSample(x=array([0, 1, 0, 1, 1, 1]), fval=np.float64(6.0), probability=np.float64(0.0197), status=<OptimizationResultStatus.SUCCESS: 0>)\n",
      "SolutionSample(x=array([1, 0, 1, 0, 0, 0]), fval=np.float64(6.0), probability=np.float64(0.020600000000000004), status=<OptimizationResultStatus.SUCCESS: 0>)\n",
      "SolutionSample(x=array([0, 1, 0, 1, 0, 0]), fval=np.float64(6.0), probability=np.float64(0.0182), status=<OptimizationResultStatus.SUCCESS: 0>)\n",
      "SolutionSample(x=array([1, 0, 1, 0, 1, 1]), fval=np.float64(6.0), probability=np.float64(0.0197), status=<OptimizationResultStatus.SUCCESS: 0>)\n"
     ]
    }
   ],
   "source": [
    "print(f\"The number of distinct samples is {len(results.samples)}.\")\n",
    "print(\"Top 10 samples with the largest fval:\")\n",
    "for sample in results.samples[:10]:\n",
    "    print(sample)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Alternative: Solve the Problem in Two Explicit Steps\n",
    "\n",
    "In the previous part of this tutorial, we utilized the `qrao.solve()` method, which solved the encoded problem (the ground state of the relaxed Hamiltonian) and performed rounding to map the ground state results back to a solution of the original problem. However, it is also possible to explicitly break down the calculation into these two distinct steps. This can be beneficial, especially when comparing solutions obtained across multiple rounding schemes applied to a candidate ground state.\n",
    "\n",
    "In this section, we will explore how to perform each of these steps explicitly.\n",
    "\n",
    "## Manually solve the relaxed problem.\n",
    "\n",
    "Let's start by invoking the `qrao.solve_relaxed()` method to directly solve the relaxed problem encoded by `QuantumRandomAccessEncoding`.\n",
    "This method allows us to focus solely on solving the relaxed problem without performing rounding.\n",
    "\n",
    "By invoking `qrao.solve_relaxed()`, we obtain two essential outputs:\n",
    "\n",
    "- `MinimumEigensolverResult`: This object contains the results of running the minimum eigen optimizer such as the VQE on the relaxed problem. It provides information about the eigenvalue, and other relevant details. You can refer to the Qiskit Algorithms [documentation](https://docs.quantum.ibm.com/api/qiskit/qiskit.algorithms.MinimumEigensolverResult) for a comprehensive explanation of the entries within this object.\n",
    "- `RoundingContext`: This object encapsulates essential information about the encoding and the solution of the relaxed problem in a form that is ready for consumption by the rounding schemes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Encode the QUBO problem into a relaxed Hamiltonian\n",
    "encoding = QuantumRandomAccessEncoding(max_vars_per_qubit=3)\n",
    "encoding.encode(problem)\n",
    "\n",
    "# Solve the relaxed problem\n",
    "relaxed_results, rounding_context = qrao.solve_relaxed(encoding)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "aux_operators_evaluated: [(np.float64(-1.7235537975955762e-05), {'target_precision': 0.0, 'circuit_metadata': {}}), (np.float64(1.7235344568176804e-05), {'target_precision': 0.0, 'circuit_metadata': {}}), (np.float64(0.0), {'target_precision': 0.0, 'circuit_metadata': {}}), (np.float64(0.0), {'target_precision': 0.0, 'circuit_metadata': {}}), (np.float64(2.2520508734080735e-05), {'target_precision': 0.0, 'circuit_metadata': {}}), (np.float64(-2.2520360714373133e-05), {'target_precision': 0.0, 'circuit_metadata': {}})]\n",
      "combine: <bound method AlgorithmResult.combine of <qiskit_optimization.minimum_eigensolvers.vqe.VQEResult object at 0x1278b1e90>>\n",
      "cost_function_evals: 113\n",
      "eigenvalue: -4.499999999265243\n",
      "optimal_circuit:      ┌──────────┐     ┌──────────┐     ┌──────────┐     ┌──────────┐\n",
      "q_0: ┤ Ry(θ[0]) ├──■──┤ Ry(θ[2]) ├──■──┤ Ry(θ[4]) ├──■──┤ Ry(θ[6]) ├\n",
      "     ├──────────┤┌─┴─┐├──────────┤┌─┴─┐├──────────┤┌─┴─┐├──────────┤\n",
      "q_1: ┤ Ry(θ[1]) ├┤ X ├┤ Ry(θ[3]) ├┤ X ├┤ Ry(θ[5]) ├┤ X ├┤ Ry(θ[7]) ├\n",
      "     └──────────┘└───┘└──────────┘└───┘└──────────┘└───┘└──────────┘\n",
      "optimal_parameters: {ParameterVectorElement(θ[0]): np.float64(4.529904783442962), ParameterVectorElement(θ[1]): np.float64(-1.5004084496852081), ParameterVectorElement(θ[2]): np.float64(6.839069742177364), ParameterVectorElement(θ[3]): np.float64(3.396309574278572), ParameterVectorElement(θ[4]): np.float64(2.381434136353712), ParameterVectorElement(θ[5]): np.float64(1.6856292170271068), ParameterVectorElement(θ[6]): np.float64(-0.6343600541279096), ParameterVectorElement(θ[7]): np.float64(5.873032228449896)}\n",
      "optimal_point: [ 4.52990478 -1.50040845  6.83906974  3.39630957  2.38143414  1.68562922\n",
      " -0.63436005  5.87303223]\n",
      "optimal_value: -4.499999999265243\n",
      "optimizer_evals: None\n",
      "optimizer_result: {   'fun': np.float64(-4.499999999265243),\n",
      "    'jac': None,\n",
      "    'nfev': np.int64(113),\n",
      "    'nit': None,\n",
      "    'njev': None,\n",
      "    'x': array([ 4.52990478, -1.50040845,  6.83906974,  3.39630957,  2.38143414,\n",
      "        1.68562922, -0.63436005,  5.87303223])}\n",
      "optimizer_time: 0.16271209716796875\n"
     ]
    }
   ],
   "source": [
    "for k in dir(relaxed_results):\n",
    "    if not k.startswith(\"_\"):\n",
    "        print(f\"{k}: {getattr(relaxed_results, k)}\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Manually perform rounding on the relaxed problem results\n",
    "\n",
    "Next, we proceed with rounding the results obtained from solving the relaxed problem. To achieve this, we call the `round()` method on an instance of the desired rounding scheme and pass it the `RoundingContext` object. Below, we provide an example for both rounding schemes, utilizing the relaxed solution obtained in the previous step.\n",
    "\n",
    "By manually performing the rounding step, we have more flexibility and control over the rounding scheme applied to the relaxed problem results. This allows for greater exploration and comparison of different rounding strategies."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The objective function value: 5.0\n",
      "x: [1 0 0 1 0 1]\n",
      "relaxed function value: -8.999999999265242\n",
      "The number of distinct samples is 1.\n"
     ]
    }
   ],
   "source": [
    "# Round the relaxed solution using semi-deterministic rounding\n",
    "semidterministic_rounding = SemideterministicRounding()\n",
    "sdr_results = semidterministic_rounding.round(rounding_context)\n",
    "qrao_results_sdr = qrao.process_result(\n",
    "    problem=problem, encoding=encoding, relaxed_result=relaxed_results, rounding_result=sdr_results\n",
    ")\n",
    "\n",
    "print(\n",
    "    f\"The objective function value: {qrao_results_sdr.fval}\\n\"\n",
    "    f\"x: {qrao_results_sdr.x}\\n\"\n",
    "    f\"relaxed function value: {-1 * qrao_results_sdr.relaxed_fval}\\n\"\n",
    "    f\"The number of distinct samples is {len(qrao_results_sdr.samples)}.\"\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The objective function value: 9.0\n",
      "x: [0 1 0 1 1 0]\n",
      "relaxed function value: -8.999999999265242\n",
      "The number of distinct samples is 56.\n"
     ]
    }
   ],
   "source": [
    "magic_rounding = MagicRounding(sampler=sampler)\n",
    "mr_results = magic_rounding.round(rounding_context)\n",
    "qrao_results_mr = qrao.process_result(\n",
    "    problem=problem, encoding=encoding, relaxed_result=relaxed_results, rounding_result=mr_results\n",
    ")\n",
    "\n",
    "print(\n",
    "    f\"The objective function value: {qrao_results_mr.fval}\\n\"\n",
    "    f\"x: {qrao_results_mr.x}\\n\"\n",
    "    f\"relaxed function value: {-1 * qrao_results_mr.relaxed_fval}\\n\"\n",
    "    f\"The number of distinct samples is {len(qrao_results_mr.samples)}.\"\n",
    ")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Appendix\n",
    "### How to verify correctness of your encoding\n",
    "We assume for sake of the QRAO method that **the relaxation commutes with the objective function.** This notebook demonstrates how one can verify this for any problem (a `QuadraticProgram` in the language of Qiskit Optimization). One might want to verify this for pedagogical purposes, or as a sanity check when investigating unexpected behavior with the QRAO. Any problem that does not commute should be considered a bug, and if such a problem is discovered, we encourage that you submit it as [an issue on GitHub](https://github.com/qiskit-community/qiskit-optimization/issues).\n",
    "\n",
    "The `EncodingCommutationVerifier` class allows one to conveniently iterate over all decision variable states and compare each objective value with the corresponding encoded objective value, in order to identify any discrepancy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Problem name: Max-cut\n",
      "\n",
      "Maximize\n",
      "  -2*x_0*x_1 - 2*x_0*x_3 - 2*x_0*x_4 - 2*x_1*x_2 - 2*x_1*x_5 - 2*x_2*x_3\n",
      "  - 2*x_2*x_4 - 2*x_3*x_5 - 2*x_4*x_5 + 3*x_0 + 3*x_1 + 3*x_2 + 3*x_3 + 3*x_4\n",
      "  + 3*x_5\n",
      "\n",
      "Subject to\n",
      "  No constraints\n",
      "\n",
      "  Binary variables (6)\n",
      "    x_0 x_1 x_2 x_3 x_4 x_5\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from qiskit_optimization.algorithms.qrao import EncodingCommutationVerifier\n",
    "\n",
    "seed = 1\n",
    "num_nodes = 6\n",
    "graph = nx.random_regular_graph(d=3, n=num_nodes, seed=seed)\n",
    "nx.draw(graph, with_labels=True, pos=nx.spring_layout(graph, seed=seed))\n",
    "\n",
    "maxcut = Maxcut(graph)\n",
    "problem = maxcut.to_quadratic_program()\n",
    "print(problem.prettyprint())"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As before, we `encode()` the problem using the QuantumRandomAccessEncoding class:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Encoded Problem:\n",
      "=================\n",
      "SparsePauliOp(['XX', 'XY', 'XZ', 'YX', 'ZX', 'YY', 'YZ', 'ZY', 'ZZ'],\n",
      "              coeffs=[1.5+0.j, 1.5+0.j, 1.5+0.j, 1.5+0.j, 1.5+0.j, 1.5+0.j, 1.5+0.j, 1.5+0.j,\n",
      " 1.5+0.j])\n",
      "Offset =  -4.5\n",
      "Variables encoded on each qubit:  [[0, 2, 5], [1, 3, 4]]\n"
     ]
    }
   ],
   "source": [
    "encoding = QuantumRandomAccessEncoding(max_vars_per_qubit=3)\n",
    "encoding.encode(problem)\n",
    "\n",
    "print(\"Encoded Problem:\\n=================\")\n",
    "print(encoding.qubit_op)  # The Hamiltonian without the offset\n",
    "print(\"Offset = \", encoding.offset)\n",
    "print(\"Variables encoded on each qubit: \", encoding.q2vars)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, we iterate over every decision variable state using `EncodingCommutationVerifier` and verify that, in each case, the problem objective value matches the encoded objective value:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "verifier = EncodingCommutationVerifier(encoding, estimator=StatevectorEstimator())\n",
    "if not len(verifier) == 2**encoding.num_vars:\n",
    "    print(\"The number results of the encoded problem is not equal to 2 ** num_vars.\")\n",
    "\n",
    "for str_dvars, obj_val, encoded_obj_val in verifier:\n",
    "    if not np.isclose(obj_val, encoded_obj_val):\n",
    "        print(\n",
    "            f\"Violation identified: {str_dvars} evaluates to {obj_val} \"\n",
    "            f\"but the encoded problem evaluates to {encoded_obj_val}.\"\n",
    "        )"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you are able to construct a problem that causes a violation, it is quite possible that you have discovered a bug in the `QuantumRandomAccessEncoding` logic. We would greatly appreciate it if you could share the problem with us by [submitting it as an issue](https://github.com/Qiskit/qiskit-optimization/issues) on GitHub."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h3>Version Information</h3><table><tr><th>Software</th><th>Version</th></tr><tr><td><code>qiskit</code></td><td>2.1.1</td></tr><tr><td><code>qiskit_optimization</code></td><td>0.7.0</td></tr><tr><th colspan='2'>System information</th></tr><tr><td>Python version</td><td>3.11.12</td></tr><tr><td>OS</td><td>Darwin</td></tr><tr><td colspan='2'>Sat Aug 09 16:57:00 2025 JST</td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div style='width: 100%; background-color:#d5d9e0;padding-left: 10px; padding-bottom: 10px; padding-right: 10px; padding-top: 5px'><h3>This code is a part of a Qiskit project</h3><p>&copy; Copyright IBM 2017, 2025.</p><p>This code is licensed under the Apache License, Version 2.0. You may<br>obtain a copy of this license in the LICENSE.txt file in the root directory<br> of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.<p>Any modifications or derivative works of this code must retain this<br>copyright notice, and modified files need to carry a notice indicating<br>that they have been altered from the originals.</p></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import tutorial_magics\n",
    "\n",
    "%qiskit_version_table\n",
    "%qiskit_copyright"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
