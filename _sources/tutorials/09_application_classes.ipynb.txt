{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Application Classes for Optimization Problems"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "\n",
    "We introduce application classes for the following optimization problems so that users can easily try various optimization problems on quantum computers.\n",
    "\n",
    "1. Exact cover problem\n",
    "  - Given a collection of subsets of items, find a subcollection such that each item is covered exactly once.\n",
    "2. Knapsack problem\n",
    "  - Given a set of items, find a subset of items such that the total weight is within the capacity and the total value is maximized.\n",
    "3. Number partition problem\n",
    "  - Given a multiset of positive integers, find a partition of the multiset into two subsets such that the sums of the subsets are equal.\n",
    "4. Set packing problem\n",
    "  - Given a collection of subsets of items, find a subcollection such that all subsets of the subcollection are pairwise disjoint and the number of items in the subcollection is maximized.\n",
    "\n",
    "Graph problems\n",
    "\n",
    "5. Clique problem\n",
    "  - Given an undirected graph, find a subset of nodes with a specified number or the maximum number such that the induced subgraph is complete.\n",
    "6. Graph partition problem\n",
    "  - Given an undirected graph, find a partition into two components whose sizes are equal such that the total capacity of the edges between the two components is minimized.\n",
    "7. Max-cut problem\n",
    "  - Given an undirected graph, find a partition of nodes into two subsets such that the total weight of the edges between the two subsets is maximized. \n",
    "8. Stable set problem\n",
    "  - Given an undirected graph, find a subset of nodes such that no edge connects the nodes in the subset and the number of nodes is maximized.\n",
    "9. Traveling salesman problem\n",
    "  - Given a graph, find a route with the minimum distance such that the route visits each city exactly once.\n",
    "10. Vehicle routing problem\n",
    "  - Given a graph, a depot node, and the number of vehicles (routes), find a set of routes such that each node is covered exactly once except the depot and the total distance of the routes is minimized.\n",
    "11. Vertex cover problem\n",
    "  - Given an undirected graph, find a subset of nodes with the minimum size such that each edge has at least one endpoint in the subsets.\n",
    "\n",
    "The application classes for graph problems (`GraphOptimizationApplication`) provide a functionality to draw graphs of an instance and a result.\n",
    "Note that you need to install `matplotlib` beforehand to utilize the functionality."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We introduce examples of the vertex cover problem and the knapsack problem in this page.\n",
    "\n",
    "Examples of the max-cut problem and the traveling salesman problem are available in [Max-Cut and Traveling Salesman Problem](06_examples_max_cut_and_tsp.ipynb)."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We first import packages necessary for application classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit.primitives import StatevectorSampler\n",
    "from qiskit_optimization.algorithms import MinimumEigenOptimizer\n",
    "from qiskit_optimization.minimum_eigensolvers import QAOA, NumPyMinimumEigensolver\n",
    "from qiskit_optimization.optimizers import COBYLA\n",
    "from qiskit_optimization.utils import algorithm_globals"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Vertex cover problem\n",
    "\n",
    "We introduce the application class for the vertex cover problem as an example of graph problems.\n",
    "Given an undirected graph, the vertex cover problem asks us to find a subset of nodes with the minimum size such that all edges are covered by any node selected.\n",
    "\n",
    "We import the application class `VertexCover` for the vertex cover problem and `networkx` to generate a random graph.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "from qiskit_optimization.applications.vertex_cover import VertexCover\n",
    "\n",
    "seed = 123\n",
    "algorithm_globals.random_seed = seed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "graph = nx.random_regular_graph(d=3, n=6, seed=seed)\n",
    "pos = nx.spring_layout(graph, seed=seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "prob = VertexCover(graph)\n",
    "prob.draw(pos=pos)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`VertexCover` takes a graph as an instance and `to_quadratic_program` generates a corresponding `QuadraticProgram` of the instance of the vertex cover problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Problem name: Vertex cover\n",
      "\n",
      "Minimize\n",
      "  x_0 + x_1 + x_2 + x_3 + x_4 + x_5\n",
      "\n",
      "Subject to\n",
      "  Linear constraints (9)\n",
      "    x_0 + x_4 >= 1  'c0'\n",
      "    x_0 + x_2 >= 1  'c1'\n",
      "    x_0 + x_5 >= 1  'c2'\n",
      "    x_1 + x_2 >= 1  'c3'\n",
      "    x_1 + x_4 >= 1  'c4'\n",
      "    x_1 + x_3 >= 1  'c5'\n",
      "    x_2 + x_3 >= 1  'c6'\n",
      "    x_3 + x_5 >= 1  'c7'\n",
      "    x_4 + x_5 >= 1  'c8'\n",
      "\n",
      "  Binary variables (6)\n",
      "    x_0 x_1 x_2 x_3 x_4 x_5\n",
      "\n"
     ]
    }
   ],
   "source": [
    "qp = prob.to_quadratic_program()\n",
    "print(qp.prettyprint())"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can solve the problem as follows. `NumPyMinimumEigensolver` finds the minimum eigen vector. You can also apply QAOA. Note that the solution by QAOA is not always optimal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "objective function value: 4.0\n",
      "variable values: x_0=0.0, x_1=0.0, x_2=1.0, x_3=1.0, x_4=1.0, x_5=1.0\n",
      "status: SUCCESS\n",
      "\n",
      "solution: [2, 3, 4, 5]\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Numpy Eigensolver\n",
    "meo = MinimumEigenOptimizer(min_eigen_solver=NumPyMinimumEigensolver())\n",
    "result = meo.solve(qp)\n",
    "print(result.prettyprint())\n",
    "print(\"\\nsolution:\", prob.interpret(result))\n",
    "prob.draw(result, pos=pos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "objective function value: 4.0\n",
      "variable values: x_0=1.0, x_1=1.0, x_2=1.0, x_3=0.0, x_4=0.0, x_5=1.0\n",
      "status: SUCCESS\n",
      "\n",
      "solution: [0, 1, 2, 5]\n",
      "\n",
      "time: 0.31861114501953125\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# QAOA\n",
    "meo = MinimumEigenOptimizer(\n",
    "    min_eigen_solver=QAOA(reps=1, sampler=StatevectorSampler(seed=123), optimizer=COBYLA())\n",
    ")\n",
    "result = meo.solve(qp)\n",
    "print(result.prettyprint())\n",
    "print(\"\\nsolution:\", prob.interpret(result))\n",
    "print(\"\\ntime:\", result.min_eigen_solver_result.optimizer_time)\n",
    "prob.draw(result, pos=pos)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Knapsack problem\n",
    "\n",
    "The knapsack problem asks us to find a combination of items such that the total weight is within the capacity of the knapsack and maximize the total value of the items.\n",
    "The following examples solve an instance of the knapsack problem with 5 items by Numpy eigensolver and QAOA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit_optimization.applications import Knapsack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Problem name: Knapsack\n",
      "\n",
      "Maximize\n",
      "  3*x_0 + 4*x_1 + 5*x_2 + 6*x_3 + 7*x_4\n",
      "\n",
      "Subject to\n",
      "  Linear constraints (1)\n",
      "    2*x_0 + 3*x_1 + 4*x_2 + 5*x_3 + 6*x_4 <= 10  'c0'\n",
      "\n",
      "  Binary variables (5)\n",
      "    x_0 x_1 x_2 x_3 x_4\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prob = Knapsack(values=[3, 4, 5, 6, 7], weights=[2, 3, 4, 5, 6], max_weight=10)\n",
    "qp = prob.to_quadratic_program()\n",
    "print(qp.prettyprint())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "objective function value: 13.0\n",
      "variable values: x_0=1.0, x_1=1.0, x_2=0.0, x_3=1.0, x_4=0.0\n",
      "status: SUCCESS\n",
      "\n",
      "solution: [0, 1, 3]\n"
     ]
    }
   ],
   "source": [
    "# Numpy Eigensolver\n",
    "meo = MinimumEigenOptimizer(min_eigen_solver=NumPyMinimumEigensolver())\n",
    "result = meo.solve(qp)\n",
    "print(result.prettyprint())\n",
    "print(\"\\nsolution:\", prob.interpret(result))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "objective function value: 13.0\n",
      "variable values: x_0=1.0, x_1=1.0, x_2=0.0, x_3=1.0, x_4=0.0\n",
      "status: SUCCESS\n",
      "\n",
      "solution: [0, 1, 3]\n",
      "\n",
      "time: 0.4513540267944336\n"
     ]
    }
   ],
   "source": [
    "# QAOA\n",
    "meo = MinimumEigenOptimizer(\n",
    "    min_eigen_solver=QAOA(reps=1, sampler=StatevectorSampler(seed=123), optimizer=COBYLA())\n",
    ")\n",
    "result = meo.solve(qp)\n",
    "print(result.prettyprint())\n",
    "print(\"\\nsolution:\", prob.interpret(result))\n",
    "print(\"\\ntime:\", result.min_eigen_solver_result.optimizer_time)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How to check the Hamiltonian\n",
    "\n",
    "If you want to check the actual Hamiltonian generated from your problem instance, you need to apply a converter as follows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "from qiskit_optimization.converters import QuadraticProgramToQubo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Problem name: Knapsack\n",
      "\n",
      "Maximize\n",
      "  3*x_0 + 4*x_1 + 5*x_2 + 6*x_3 + 7*x_4\n",
      "\n",
      "Subject to\n",
      "  Linear constraints (1)\n",
      "    2*x_0 + 3*x_1 + 4*x_2 + 5*x_3 + 6*x_4 <= 10  'c0'\n",
      "\n",
      "  Binary variables (5)\n",
      "    x_0 x_1 x_2 x_3 x_4\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# the same knapsack problem instance as in the previous section\n",
    "prob = Knapsack(values=[3, 4, 5, 6, 7], weights=[2, 3, 4, 5, 6], max_weight=10)\n",
    "qp = prob.to_quadratic_program()\n",
    "print(qp.prettyprint())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Problem name: Knapsack\n",
      "\n",
      "Minimize\n",
      "  26*c0@int_slack@0^2 + 104*c0@int_slack@0*c0@int_slack@1\n",
      "  + 208*c0@int_slack@0*c0@int_slack@2 + 156*c0@int_slack@0*c0@int_slack@3\n",
      "  + 104*c0@int_slack@1^2 + 416*c0@int_slack@1*c0@int_slack@2\n",
      "  + 312*c0@int_slack@1*c0@int_slack@3 + 416*c0@int_slack@2^2\n",
      "  + 624*c0@int_slack@2*c0@int_slack@3 + 234*c0@int_slack@3^2\n",
      "  + 104*x_0*c0@int_slack@0 + 208*x_0*c0@int_slack@1 + 416*x_0*c0@int_slack@2\n",
      "  + 312*x_0*c0@int_slack@3 + 104*x_0^2 + 312*x_0*x_1 + 416*x_0*x_2 + 520*x_0*x_3\n",
      "  + 624*x_0*x_4 + 156*x_1*c0@int_slack@0 + 312*x_1*c0@int_slack@1\n",
      "  + 624*x_1*c0@int_slack@2 + 468*x_1*c0@int_slack@3 + 234*x_1^2 + 624*x_1*x_2\n",
      "  + 780*x_1*x_3 + 936*x_1*x_4 + 208*x_2*c0@int_slack@0 + 416*x_2*c0@int_slack@1\n",
      "  + 832*x_2*c0@int_slack@2 + 624*x_2*c0@int_slack@3 + 416*x_2^2 + 1040*x_2*x_3\n",
      "  + 1248*x_2*x_4 + 260*x_3*c0@int_slack@0 + 520*x_3*c0@int_slack@1\n",
      "  + 1040*x_3*c0@int_slack@2 + 780*x_3*c0@int_slack@3 + 650*x_3^2 + 1560*x_3*x_4\n",
      "  + 312*x_4*c0@int_slack@0 + 624*x_4*c0@int_slack@1 + 1248*x_4*c0@int_slack@2\n",
      "  + 936*x_4*c0@int_slack@3 + 936*x_4^2 - 520*c0@int_slack@0\n",
      "  - 1040*c0@int_slack@1 - 2080*c0@int_slack@2 - 1560*c0@int_slack@3 - 1043*x_0\n",
      "  - 1564*x_1 - 2085*x_2 - 2606*x_3 - 3127*x_4 + 2600\n",
      "\n",
      "Subject to\n",
      "  No constraints\n",
      "\n",
      "  Binary variables (9)\n",
      "    x_0 x_1 x_2 x_3 x_4 c0@int_slack@0 c0@int_slack@1 c0@int_slack@2\n",
      "    c0@int_slack@3\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# intermediate QUBO form of the optimization problem\n",
    "conv = QuadraticProgramToQubo()\n",
    "qubo = conv.convert(qp)\n",
    "print(qubo.prettyprint())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num qubits: 9, offset: 1417.5\n",
      "\n",
      "SparsePauliOp(['IIIIIIIIZ', 'IIIIIIIZI', 'IIIIIIZII', 'IIIIIZIII', 'IIIIZIIII', 'IIIZIIIII', 'IIZIIIIII', 'IZIIIIIII', 'ZIIIIIIII', 'IIIIIIIZZ', 'IIIIIIZIZ', 'IIIIIZIIZ', 'IIIIZIIIZ', 'IIIZIIIIZ', 'IIZIIIIIZ', 'IZIIIIIIZ', 'ZIIIIIIIZ', 'IIIIIIZZI', 'IIIIIZIZI', 'IIIIZIIZI', 'IIIZIIIZI', 'IIZIIIIZI', 'IZIIIIIZI', 'ZIIIIIIZI', 'IIIIIZZII', 'IIIIZIZII', 'IIIZIIZII', 'IIZIIIZII', 'IZIIIIZII', 'ZIIIIIZII', 'IIIIZZIII', 'IIIZIZIII', 'IIZIIZIII', 'IZIIIZIII', 'ZIIIIZIII', 'IIIZZIIII', 'IIZIZIIII', 'IZIIZIIII', 'ZIIIZIIII', 'IIZZIIIII', 'IZIZIIIII', 'ZIIZIIIII', 'IZZIIIIII', 'ZIZIIIIII', 'ZZIIIIIII'],\n",
      "              coeffs=[-258.5+0.j, -388. +0.j, -517.5+0.j, -647. +0.j, -776.5+0.j, -130. +0.j,\n",
      " -260. +0.j, -520. +0.j, -390. +0.j,   78. +0.j,  104. +0.j,  130. +0.j,\n",
      "  156. +0.j,   26. +0.j,   52. +0.j,  104. +0.j,   78. +0.j,  156. +0.j,\n",
      "  195. +0.j,  234. +0.j,   39. +0.j,   78. +0.j,  156. +0.j,  117. +0.j,\n",
      "  260. +0.j,  312. +0.j,   52. +0.j,  104. +0.j,  208. +0.j,  156. +0.j,\n",
      "  390. +0.j,   65. +0.j,  130. +0.j,  260. +0.j,  195. +0.j,   78. +0.j,\n",
      "  156. +0.j,  312. +0.j,  234. +0.j,   26. +0.j,   52. +0.j,   39. +0.j,\n",
      "  104. +0.j,   78. +0.j,  156. +0.j])\n"
     ]
    }
   ],
   "source": [
    "# qubit Hamiltonian and offset\n",
    "op, offset = qubo.to_ising()\n",
    "print(f\"num qubits: {op.num_qubits}, offset: {offset}\\n\")\n",
    "print(op)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<h3>Version Information</h3><table><tr><th>Software</th><th>Version</th></tr><tr><td><code>qiskit</code></td><td>2.1.1</td></tr><tr><td><code>qiskit_optimization</code></td><td>0.7.0</td></tr><tr><th colspan='2'>System information</th></tr><tr><td>Python version</td><td>3.11.13</td></tr><tr><td>OS</td><td>Darwin</td></tr><tr><td colspan='2'>Mon Aug 18 14:19:54 2025 JST</td></tr></table>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div style='width: 100%; background-color:#d5d9e0;padding-left: 10px; padding-bottom: 10px; padding-right: 10px; padding-top: 5px'><h3>This code is a part of a Qiskit project</h3><p>&copy; Copyright IBM 2017, 2025.</p><p>This code is licensed under the Apache License, Version 2.0. You may<br>obtain a copy of this license in the LICENSE.txt file in the root directory<br> of this source tree or at http://www.apache.org/licenses/LICENSE-2.0.<p>Any modifications or derivative works of this code must retain this<br>copyright notice, and modified files need to carry a notice indicating<br>that they have been altered from the originals.</p></div>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import tutorial_magics\n",
    "\n",
    "%qiskit_version_table\n",
    "%qiskit_copyright"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
